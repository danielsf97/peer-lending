%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.4.0
-module(protos).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_LoginRep.ClientType'/1, 'enum_value_by_symbol_LoginRep.ClientType'/1]).
-export(['enum_symbol_by_value_LoginRep.Status'/1, 'enum_value_by_symbol_LoginRep.Status'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("protos.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'LoginRep.ClientType'() :: 'COMPANY' | 'INVESTOR'.
-type 'LoginRep.Status'() :: 'INVALID' | 'SUCCESS'.
-export_type(['LoginRep.ClientType'/0, 'LoginRep.Status'/0]).

%% message types
-type 'LoginReq'() :: #'LoginReq'{}.

-type 'LoginRep'() :: #'LoginRep'{}.

-export_type(['LoginReq'/0, 'LoginRep'/0]).

-spec encode_msg(#'LoginReq'{} | #'LoginRep'{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#'LoginReq'{} | #'LoginRep'{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#'LoginReq'{} | #'LoginRep'{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'LoginReq' ->
	  encode_msg_LoginReq(id(Msg, TrUserData), TrUserData);
      'LoginRep' ->
	  encode_msg_LoginRep(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_LoginReq(Msg, TrUserData) ->
    encode_msg_LoginReq(Msg, <<>>, TrUserData).


encode_msg_LoginReq(#'LoginReq'{name = F1,
				password = F2},
		    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

encode_msg_LoginRep(Msg, TrUserData) ->
    encode_msg_LoginRep(Msg, <<>>, TrUserData).


encode_msg_LoginRep(#'LoginRep'{cType = F1,
				status = F2},
		    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  'e_enum_LoginRep.ClientType'(TrF1, <<Bin/binary, 8>>,
					       TrUserData)
		end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      'e_enum_LoginRep.Status'(TrF2, <<B1/binary, 16>>,
			       TrUserData)
    end.

'e_enum_LoginRep.ClientType'('COMPANY', Bin,
			     _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_LoginRep.ClientType'('INVESTOR', Bin,
			     _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_LoginRep.ClientType'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_LoginRep.Status'('INVALID', Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_LoginRep.Status'('SUCCESS', Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_LoginRep.Status'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('LoginReq', Bin, TrUserData) ->
    id(decode_msg_LoginReq(Bin, TrUserData), TrUserData);
decode_msg_2_doit('LoginRep', Bin, TrUserData) ->
    id(decode_msg_LoginRep(Bin, TrUserData), TrUserData).



decode_msg_LoginReq(Bin, TrUserData) ->
    dfp_read_field_def_LoginReq(Bin, 0, 0,
				id(undefined, TrUserData),
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_LoginReq(<<10, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_LoginReq_name(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
dfp_read_field_def_LoginReq(<<18, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_LoginReq_password(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_LoginReq(<<>>, 0, 0, F@_1, F@_2,
			    _) ->
    #'LoginReq'{name = F@_1, password = F@_2};
dfp_read_field_def_LoginReq(Other, Z1, Z2, F@_1, F@_2,
			    TrUserData) ->
    dg_read_field_def_LoginReq(Other, Z1, Z2, F@_1, F@_2,
			       TrUserData).

dg_read_field_def_LoginReq(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LoginReq(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
dg_read_field_def_LoginReq(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_LoginReq_name(Rest, 0, 0, F@_1, F@_2,
				TrUserData);
      18 ->
	  d_field_LoginReq_password(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_LoginReq(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    1 ->
		skip_64_LoginReq(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_LoginReq(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    3 ->
		skip_group_LoginReq(Rest, Key bsr 3, 0, F@_1, F@_2,
				    TrUserData);
	    5 ->
		skip_32_LoginReq(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_LoginReq(<<>>, 0, 0, F@_1, F@_2, _) ->
    #'LoginReq'{name = F@_1, password = F@_2}.

d_field_LoginReq_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_LoginReq_name(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, TrUserData);
d_field_LoginReq_name(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_LoginReq(RestF, 0, 0, NewFValue,
				F@_2, TrUserData).

d_field_LoginReq_password(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_LoginReq_password(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_LoginReq_password(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_LoginReq(RestF, 0, 0, F@_1,
				NewFValue, TrUserData).

skip_varint_LoginReq(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    skip_varint_LoginReq(Rest, Z1, Z2, F@_1, F@_2,
			 TrUserData);
skip_varint_LoginReq(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_LoginReq(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_length_delimited_LoginReq(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_LoginReq(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_LoginReq(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LoginReq(Rest2, 0, 0, F@_1, F@_2,
				TrUserData).

skip_group_LoginReq(Bin, FNum, Z2, F@_1, F@_2,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LoginReq(Rest, 0, Z2, F@_1, F@_2,
				TrUserData).

skip_32_LoginReq(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_LoginReq(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_64_LoginReq(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_LoginReq(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

decode_msg_LoginRep(Bin, TrUserData) ->
    dfp_read_field_def_LoginRep(Bin, 0, 0,
				id(undefined, TrUserData),
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_LoginRep(<<8, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_LoginRep_cType(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData);
dfp_read_field_def_LoginRep(<<16, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_LoginRep_status(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_LoginRep(<<>>, 0, 0, F@_1, F@_2,
			    _) ->
    #'LoginRep'{cType = F@_1, status = F@_2};
dfp_read_field_def_LoginRep(Other, Z1, Z2, F@_1, F@_2,
			    TrUserData) ->
    dg_read_field_def_LoginRep(Other, Z1, Z2, F@_1, F@_2,
			       TrUserData).

dg_read_field_def_LoginRep(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LoginRep(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
dg_read_field_def_LoginRep(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_LoginRep_cType(Rest, 0, 0, F@_1, F@_2,
				 TrUserData);
      16 ->
	  d_field_LoginRep_status(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_LoginRep(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    1 ->
		skip_64_LoginRep(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_LoginRep(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    3 ->
		skip_group_LoginRep(Rest, Key bsr 3, 0, F@_1, F@_2,
				    TrUserData);
	    5 ->
		skip_32_LoginRep(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_LoginRep(<<>>, 0, 0, F@_1, F@_2, _) ->
    #'LoginRep'{cType = F@_1, status = F@_2}.

d_field_LoginRep_cType(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_LoginRep_cType(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, TrUserData);
d_field_LoginRep_cType(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_LoginRep.ClientType'(begin
					   <<Res:32/signed-native>> = <<(X bsl N
									   +
									   Acc):32/unsigned-native>>,
					   id(Res, TrUserData)
					 end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_LoginRep(RestF, 0, 0, NewFValue,
				F@_2, TrUserData).

d_field_LoginRep_status(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_LoginRep_status(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_LoginRep_status(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_LoginRep.Status'(begin
							<<Res:32/signed-native>> =
							    <<(X bsl N +
								 Acc):32/unsigned-native>>,
							id(Res, TrUserData)
						      end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_LoginRep(RestF, 0, 0, F@_1,
				NewFValue, TrUserData).

skip_varint_LoginRep(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    skip_varint_LoginRep(Rest, Z1, Z2, F@_1, F@_2,
			 TrUserData);
skip_varint_LoginRep(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_LoginRep(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_length_delimited_LoginRep(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_LoginRep(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_LoginRep(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LoginRep(Rest2, 0, 0, F@_1, F@_2,
				TrUserData).

skip_group_LoginRep(Bin, FNum, Z2, F@_1, F@_2,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LoginRep(Rest, 0, Z2, F@_1, F@_2,
				TrUserData).

skip_32_LoginRep(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_LoginRep(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_64_LoginRep(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_LoginRep(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

'd_enum_LoginRep.ClientType'(0) -> 'COMPANY';
'd_enum_LoginRep.ClientType'(1) -> 'INVESTOR';
'd_enum_LoginRep.ClientType'(V) -> V.

'd_enum_LoginRep.Status'(0) -> 'INVALID';
'd_enum_LoginRep.Status'(1) -> 'SUCCESS';
'd_enum_LoginRep.Status'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'LoginReq' -> merge_msg_LoginReq(Prev, New, TrUserData);
      'LoginRep' -> merge_msg_LoginRep(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_LoginReq/3}).
merge_msg_LoginReq(#'LoginReq'{},
		   #'LoginReq'{name = NFname, password = NFpassword}, _) ->
    #'LoginReq'{name = NFname, password = NFpassword}.

-compile({nowarn_unused_function,merge_msg_LoginRep/3}).
merge_msg_LoginRep(#'LoginRep'{cType = PFcType},
		   #'LoginRep'{cType = NFcType, status = NFstatus}, _) ->
    #'LoginRep'{cType =
		    if NFcType =:= undefined -> PFcType;
		       true -> NFcType
		    end,
		status = NFstatus}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'LoginReq' ->
	  v_msg_LoginReq(Msg, [MsgName], TrUserData);
      'LoginRep' ->
	  v_msg_LoginRep(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_LoginReq/3}).
-dialyzer({nowarn_function,v_msg_LoginReq/3}).
v_msg_LoginReq(#'LoginReq'{name = F1, password = F2},
	       Path, TrUserData) ->
    v_type_string(F1, [name | Path], TrUserData),
    v_type_string(F2, [password | Path], TrUserData),
    ok;
v_msg_LoginReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'LoginReq'}, X, Path).

-compile({nowarn_unused_function,v_msg_LoginRep/3}).
-dialyzer({nowarn_function,v_msg_LoginRep/3}).
v_msg_LoginRep(#'LoginRep'{cType = F1, status = F2},
	       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   'v_enum_LoginRep.ClientType'(F1, [cType | Path],
					TrUserData)
    end,
    'v_enum_LoginRep.Status'(F2, [status | Path],
			     TrUserData),
    ok;
v_msg_LoginRep(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'LoginRep'}, X, Path).

-compile({nowarn_unused_function,'v_enum_LoginRep.ClientType'/3}).
-dialyzer({nowarn_function,'v_enum_LoginRep.ClientType'/3}).
'v_enum_LoginRep.ClientType'('COMPANY', _Path,
			     _TrUserData) ->
    ok;
'v_enum_LoginRep.ClientType'('INVESTOR', _Path,
			     _TrUserData) ->
    ok;
'v_enum_LoginRep.ClientType'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_LoginRep.ClientType'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'LoginRep.ClientType'}, X,
		  Path).

-compile({nowarn_unused_function,'v_enum_LoginRep.Status'/3}).
-dialyzer({nowarn_function,'v_enum_LoginRep.Status'/3}).
'v_enum_LoginRep.Status'('INVALID', _Path,
			 _TrUserData) ->
    ok;
'v_enum_LoginRep.Status'('SUCCESS', _Path,
			 _TrUserData) ->
    ok;
'v_enum_LoginRep.Status'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_LoginRep.Status'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'LoginRep.Status'}, X,
		  Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{enum, 'LoginRep.ClientType'},
      [{'COMPANY', 0}, {'INVESTOR', 1}]},
     {{enum, 'LoginRep.Status'},
      [{'INVALID', 0}, {'SUCCESS', 1}]},
     {{msg, 'LoginReq'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = password, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'LoginRep'},
      [#field{name = cType, fnum = 1, rnum = 2,
	      type = {enum, 'LoginRep.ClientType'},
	      occurrence = optional, opts = []},
       #field{name = status, fnum = 2, rnum = 3,
	      type = {enum, 'LoginRep.Status'}, occurrence = required,
	      opts = []}]}].


get_msg_names() -> ['LoginReq', 'LoginRep'].


get_group_names() -> [].


get_msg_or_group_names() -> ['LoginReq', 'LoginRep'].


get_enum_names() ->
    ['LoginRep.ClientType', 'LoginRep.Status'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('LoginReq') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = password, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []}];
find_msg_def('LoginRep') ->
    [#field{name = cType, fnum = 1, rnum = 2,
	    type = {enum, 'LoginRep.ClientType'},
	    occurrence = optional, opts = []},
     #field{name = status, fnum = 2, rnum = 3,
	    type = {enum, 'LoginRep.Status'}, occurrence = required,
	    opts = []}];
find_msg_def(_) -> error.


find_enum_def('LoginRep.ClientType') ->
    [{'COMPANY', 0}, {'INVESTOR', 1}];
find_enum_def('LoginRep.Status') ->
    [{'INVALID', 0}, {'SUCCESS', 1}];
find_enum_def(_) -> error.


enum_symbol_by_value('LoginRep.ClientType', Value) ->
    'enum_symbol_by_value_LoginRep.ClientType'(Value);
enum_symbol_by_value('LoginRep.Status', Value) ->
    'enum_symbol_by_value_LoginRep.Status'(Value).


enum_value_by_symbol('LoginRep.ClientType', Sym) ->
    'enum_value_by_symbol_LoginRep.ClientType'(Sym);
enum_value_by_symbol('LoginRep.Status', Sym) ->
    'enum_value_by_symbol_LoginRep.Status'(Sym).


'enum_symbol_by_value_LoginRep.ClientType'(0) ->
    'COMPANY';
'enum_symbol_by_value_LoginRep.ClientType'(1) ->
    'INVESTOR'.


'enum_value_by_symbol_LoginRep.ClientType'('COMPANY') ->
    0;
'enum_value_by_symbol_LoginRep.ClientType'('INVESTOR') ->
    1.

'enum_symbol_by_value_LoginRep.Status'(0) -> 'INVALID';
'enum_symbol_by_value_LoginRep.Status'(1) -> 'SUCCESS'.


'enum_value_by_symbol_LoginRep.Status'('INVALID') -> 0;
'enum_value_by_symbol_LoginRep.Status'('SUCCESS') -> 1.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "4.4.0".

gpb_version_as_list() ->
    [4,4,0].
