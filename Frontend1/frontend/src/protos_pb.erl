%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.4.0
-module(protos_pb).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_LoginResp.ClientType'/1, 'enum_value_by_symbol_LoginResp.ClientType'/1]).
-export(['enum_symbol_by_value_LoginResp.Status'/1, 'enum_value_by_symbol_LoginResp.Status'/1]).
-export(['enum_symbol_by_value_AuctionResp.Status'/1, 'enum_value_by_symbol_AuctionResp.Status'/1]).
-export(['enum_symbol_by_value_InvestorActionReq.RequestType'/1, 'enum_value_by_symbol_InvestorActionReq.RequestType'/1]).
-export(['enum_symbol_by_value_InvestorActionResp.Status'/1, 'enum_value_by_symbol_InvestorActionResp.Status'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("protos_pb.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'LoginResp.ClientType'() :: 'COMPANY' | 'INVESTOR'.
-type 'LoginResp.Status'() :: 'INVALID' | 'SUCCESS'.
-type 'AuctionResp.Status'() :: 'SUCCESS' | 'ONGOING_AUCTION'.
-type 'InvestorActionReq.RequestType'() :: 'AUCTION' | 'EMISSION'.
-type 'InvestorActionResp.Status'() :: 'CONFIRMED' | 'REPLACED' | 'ENDED' | 'INVALID'.
-export_type(['LoginResp.ClientType'/0, 'LoginResp.Status'/0, 'AuctionResp.Status'/0, 'InvestorActionReq.RequestType'/0, 'InvestorActionResp.Status'/0]).

%% message types
-type 'LoginReq'() :: #'LoginReq'{}.

-type 'LoginResp'() :: #'LoginResp'{}.

-type 'AuctionReq'() :: #'AuctionReq'{}.

-type 'AuctionResp'() :: #'AuctionResp'{}.

-type 'InvestorActionReq'() :: #'InvestorActionReq'{}.

-type 'InvestorActionResp'() :: #'InvestorActionResp'{}.

-export_type(['LoginReq'/0, 'LoginResp'/0, 'AuctionReq'/0, 'AuctionResp'/0, 'InvestorActionReq'/0, 'InvestorActionResp'/0]).

-spec encode_msg(#'LoginReq'{} | #'LoginResp'{} | #'AuctionReq'{} | #'AuctionResp'{} | #'InvestorActionReq'{} | #'InvestorActionResp'{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#'LoginReq'{} | #'LoginResp'{} | #'AuctionReq'{} | #'AuctionResp'{} | #'InvestorActionReq'{} | #'InvestorActionResp'{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#'LoginReq'{} | #'LoginResp'{} | #'AuctionReq'{} | #'AuctionResp'{} | #'InvestorActionReq'{} | #'InvestorActionResp'{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'LoginReq' ->
	  encode_msg_LoginReq(id(Msg, TrUserData), TrUserData);
      'LoginResp' ->
	  encode_msg_LoginResp(id(Msg, TrUserData), TrUserData);
      'AuctionReq' ->
	  encode_msg_AuctionReq(id(Msg, TrUserData), TrUserData);
      'AuctionResp' ->
	  encode_msg_AuctionResp(id(Msg, TrUserData), TrUserData);
      'InvestorActionReq' ->
	  encode_msg_InvestorActionReq(id(Msg, TrUserData),
				       TrUserData);
      'InvestorActionResp' ->
	  encode_msg_InvestorActionResp(id(Msg, TrUserData),
					TrUserData)
    end.


encode_msg_LoginReq(Msg, TrUserData) ->
    encode_msg_LoginReq(Msg, <<>>, TrUserData).


encode_msg_LoginReq(#'LoginReq'{name = F1,
				password = F2},
		    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

encode_msg_LoginResp(Msg, TrUserData) ->
    encode_msg_LoginResp(Msg, <<>>, TrUserData).


encode_msg_LoginResp(#'LoginResp'{cType = F1,
				  status = F2},
		     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  'e_enum_LoginResp.ClientType'(TrF1, <<Bin/binary, 8>>,
						TrUserData)
		end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      'e_enum_LoginResp.Status'(TrF2, <<B1/binary, 16>>,
				TrUserData)
    end.

encode_msg_AuctionReq(Msg, TrUserData) ->
    encode_msg_AuctionReq(Msg, <<>>, TrUserData).


encode_msg_AuctionReq(#'AuctionReq'{value = F1,
				    max_rate = F2},
		      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_float(TrF1, <<Bin/binary, 13>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_float(TrF2, <<B1/binary, 21>>, TrUserData)
    end.

encode_msg_AuctionResp(Msg, TrUserData) ->
    encode_msg_AuctionResp(Msg, <<>>, TrUserData).


encode_msg_AuctionResp(#'AuctionResp'{status = F1}, Bin,
		       TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      'e_enum_AuctionResp.Status'(TrF1, <<Bin/binary, 8>>,
				  TrUserData)
    end.

encode_msg_InvestorActionReq(Msg, TrUserData) ->
    encode_msg_InvestorActionReq(Msg, <<>>, TrUserData).


encode_msg_InvestorActionReq(#'InvestorActionReq'{company
						      = F1,
						  req_type = F2, value = F3,
						  rate = F4},
			     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   'e_enum_InvestorActionReq.RequestType'(TrF2,
						  <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_float(TrF3, <<B2/binary, 29>>, TrUserData)
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     e_type_float(TrF4, <<B3/binary, 37>>, TrUserData)
	   end
    end.

encode_msg_InvestorActionResp(Msg, TrUserData) ->
    encode_msg_InvestorActionResp(Msg, <<>>, TrUserData).


encode_msg_InvestorActionResp(#'InvestorActionResp'{status
							= F1},
			      Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      'e_enum_InvestorActionResp.Status'(TrF1,
					 <<Bin/binary, 8>>, TrUserData)
    end.

'e_enum_LoginResp.ClientType'('COMPANY', Bin,
			      _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_LoginResp.ClientType'('INVESTOR', Bin,
			      _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_LoginResp.ClientType'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_LoginResp.Status'('INVALID', Bin,
			  _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_LoginResp.Status'('SUCCESS', Bin,
			  _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_LoginResp.Status'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_AuctionResp.Status'('SUCCESS', Bin,
			    _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_AuctionResp.Status'('ONGOING_AUCTION', Bin,
			    _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_AuctionResp.Status'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_InvestorActionReq.RequestType'('AUCTION', Bin,
				       _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_InvestorActionReq.RequestType'('EMISSION', Bin,
				       _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_InvestorActionReq.RequestType'(V, Bin,
				       _TrUserData) ->
    e_varint(V, Bin).

'e_enum_InvestorActionResp.Status'('CONFIRMED', Bin,
				   _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_InvestorActionResp.Status'('REPLACED', Bin,
				   _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_InvestorActionResp.Status'('ENDED', Bin,
				   _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_InvestorActionResp.Status'('INVALID', Bin,
				   _TrUserData) ->
    <<Bin/binary, 3>>;
'e_enum_InvestorActionResp.Status'(V, Bin,
				   _TrUserData) ->
    e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('LoginReq', Bin, TrUserData) ->
    id(decode_msg_LoginReq(Bin, TrUserData), TrUserData);
decode_msg_2_doit('LoginResp', Bin, TrUserData) ->
    id(decode_msg_LoginResp(Bin, TrUserData), TrUserData);
decode_msg_2_doit('AuctionReq', Bin, TrUserData) ->
    id(decode_msg_AuctionReq(Bin, TrUserData), TrUserData);
decode_msg_2_doit('AuctionResp', Bin, TrUserData) ->
    id(decode_msg_AuctionResp(Bin, TrUserData), TrUserData);
decode_msg_2_doit('InvestorActionReq', Bin,
		  TrUserData) ->
    id(decode_msg_InvestorActionReq(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('InvestorActionResp', Bin,
		  TrUserData) ->
    id(decode_msg_InvestorActionResp(Bin, TrUserData),
       TrUserData).



decode_msg_LoginReq(Bin, TrUserData) ->
    dfp_read_field_def_LoginReq(Bin, 0, 0,
				id(undefined, TrUserData),
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_LoginReq(<<10, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_LoginReq_name(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
dfp_read_field_def_LoginReq(<<18, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_LoginReq_password(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_LoginReq(<<>>, 0, 0, F@_1, F@_2,
			    _) ->
    #'LoginReq'{name = F@_1, password = F@_2};
dfp_read_field_def_LoginReq(Other, Z1, Z2, F@_1, F@_2,
			    TrUserData) ->
    dg_read_field_def_LoginReq(Other, Z1, Z2, F@_1, F@_2,
			       TrUserData).

dg_read_field_def_LoginReq(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LoginReq(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
dg_read_field_def_LoginReq(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_LoginReq_name(Rest, 0, 0, F@_1, F@_2,
				TrUserData);
      18 ->
	  d_field_LoginReq_password(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_LoginReq(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    1 ->
		skip_64_LoginReq(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_LoginReq(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    3 ->
		skip_group_LoginReq(Rest, Key bsr 3, 0, F@_1, F@_2,
				    TrUserData);
	    5 ->
		skip_32_LoginReq(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_LoginReq(<<>>, 0, 0, F@_1, F@_2, _) ->
    #'LoginReq'{name = F@_1, password = F@_2}.

d_field_LoginReq_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_LoginReq_name(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, TrUserData);
d_field_LoginReq_name(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_LoginReq(RestF, 0, 0, NewFValue,
				F@_2, TrUserData).

d_field_LoginReq_password(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_LoginReq_password(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_LoginReq_password(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_LoginReq(RestF, 0, 0, F@_1,
				NewFValue, TrUserData).

skip_varint_LoginReq(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    skip_varint_LoginReq(Rest, Z1, Z2, F@_1, F@_2,
			 TrUserData);
skip_varint_LoginReq(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_LoginReq(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_length_delimited_LoginReq(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_LoginReq(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_LoginReq(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LoginReq(Rest2, 0, 0, F@_1, F@_2,
				TrUserData).

skip_group_LoginReq(Bin, FNum, Z2, F@_1, F@_2,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LoginReq(Rest, 0, Z2, F@_1, F@_2,
				TrUserData).

skip_32_LoginReq(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_LoginReq(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_64_LoginReq(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_LoginReq(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

decode_msg_LoginResp(Bin, TrUserData) ->
    dfp_read_field_def_LoginResp(Bin, 0, 0,
				 id(undefined, TrUserData),
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_LoginResp(<<8, Rest/binary>>, Z1, Z2,
			     F@_1, F@_2, TrUserData) ->
    d_field_LoginResp_cType(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_LoginResp(<<16, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    d_field_LoginResp_status(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
dfp_read_field_def_LoginResp(<<>>, 0, 0, F@_1, F@_2,
			     _) ->
    #'LoginResp'{cType = F@_1, status = F@_2};
dfp_read_field_def_LoginResp(Other, Z1, Z2, F@_1, F@_2,
			     TrUserData) ->
    dg_read_field_def_LoginResp(Other, Z1, Z2, F@_1, F@_2,
				TrUserData).

dg_read_field_def_LoginResp(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LoginResp(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
dg_read_field_def_LoginResp(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_LoginResp_cType(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      16 ->
	  d_field_LoginResp_status(Rest, 0, 0, F@_1, F@_2,
				   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_LoginResp(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
	    1 ->
		skip_64_LoginResp(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_LoginResp(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    3 ->
		skip_group_LoginResp(Rest, Key bsr 3, 0, F@_1, F@_2,
				     TrUserData);
	    5 ->
		skip_32_LoginResp(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_LoginResp(<<>>, 0, 0, F@_1, F@_2,
			    _) ->
    #'LoginResp'{cType = F@_1, status = F@_2}.

d_field_LoginResp_cType(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_LoginResp_cType(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_LoginResp_cType(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_LoginResp.ClientType'(begin
					    <<Res:32/signed-native>> = <<(X bsl
									    N
									    +
									    Acc):32/unsigned-native>>,
					    id(Res, TrUserData)
					  end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_LoginResp(RestF, 0, 0, NewFValue,
				 F@_2, TrUserData).

d_field_LoginResp_status(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_LoginResp_status(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
d_field_LoginResp_status(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_LoginResp.Status'(begin
							 <<Res:32/signed-native>> =
							     <<(X bsl N +
								  Acc):32/unsigned-native>>,
							 id(Res, TrUserData)
						       end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_LoginResp(RestF, 0, 0, F@_1,
				 NewFValue, TrUserData).

skip_varint_LoginResp(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    skip_varint_LoginResp(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
skip_varint_LoginResp(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_LoginResp(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_length_delimited_LoginResp(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_LoginResp(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_LoginResp(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LoginResp(Rest2, 0, 0, F@_1, F@_2,
				 TrUserData).

skip_group_LoginResp(Bin, FNum, Z2, F@_1, F@_2,
		     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LoginResp(Rest, 0, Z2, F@_1, F@_2,
				 TrUserData).

skip_32_LoginResp(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_LoginResp(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_64_LoginResp(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_LoginResp(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

decode_msg_AuctionReq(Bin, TrUserData) ->
    dfp_read_field_def_AuctionReq(Bin, 0, 0,
				  id(undefined, TrUserData),
				  id(undefined, TrUserData), TrUserData).

dfp_read_field_def_AuctionReq(<<13, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, TrUserData) ->
    d_field_AuctionReq_value(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
dfp_read_field_def_AuctionReq(<<21, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, TrUserData) ->
    d_field_AuctionReq_max_rate(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
dfp_read_field_def_AuctionReq(<<>>, 0, 0, F@_1, F@_2,
			      _) ->
    #'AuctionReq'{value = F@_1, max_rate = F@_2};
dfp_read_field_def_AuctionReq(Other, Z1, Z2, F@_1, F@_2,
			      TrUserData) ->
    dg_read_field_def_AuctionReq(Other, Z1, Z2, F@_1, F@_2,
				 TrUserData).

dg_read_field_def_AuctionReq(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AuctionReq(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
dg_read_field_def_AuctionReq(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      13 ->
	  d_field_AuctionReq_value(Rest, 0, 0, F@_1, F@_2,
				   TrUserData);
      21 ->
	  d_field_AuctionReq_max_rate(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AuctionReq(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
	    1 ->
		skip_64_AuctionReq(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_AuctionReq(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    3 ->
		skip_group_AuctionReq(Rest, Key bsr 3, 0, F@_1, F@_2,
				      TrUserData);
	    5 ->
		skip_32_AuctionReq(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_AuctionReq(<<>>, 0, 0, F@_1, F@_2,
			     _) ->
    #'AuctionReq'{value = F@_1, max_rate = F@_2}.

d_field_AuctionReq_value(<<0:16, 128, 127,
			   Rest/binary>>,
			 Z1, Z2, _, F@_2, TrUserData) ->
    dfp_read_field_def_AuctionReq(Rest, Z1, Z2,
				  id(infinity, TrUserData), F@_2, TrUserData);
d_field_AuctionReq_value(<<0:16, 128, 255,
			   Rest/binary>>,
			 Z1, Z2, _, F@_2, TrUserData) ->
    dfp_read_field_def_AuctionReq(Rest, Z1, Z2,
				  id('-infinity', TrUserData), F@_2,
				  TrUserData);
d_field_AuctionReq_value(<<_:16, 1:1, _:7, _:1, 127:7,
			   Rest/binary>>,
			 Z1, Z2, _, F@_2, TrUserData) ->
    dfp_read_field_def_AuctionReq(Rest, Z1, Z2,
				  id(nan, TrUserData), F@_2, TrUserData);
d_field_AuctionReq_value(<<Value:32/little-float,
			   Rest/binary>>,
			 Z1, Z2, _, F@_2, TrUserData) ->
    dfp_read_field_def_AuctionReq(Rest, Z1, Z2,
				  id(Value, TrUserData), F@_2, TrUserData).

d_field_AuctionReq_max_rate(<<0:16, 128, 127,
			      Rest/binary>>,
			    Z1, Z2, F@_1, _, TrUserData) ->
    dfp_read_field_def_AuctionReq(Rest, Z1, Z2, F@_1,
				  id(infinity, TrUserData), TrUserData);
d_field_AuctionReq_max_rate(<<0:16, 128, 255,
			      Rest/binary>>,
			    Z1, Z2, F@_1, _, TrUserData) ->
    dfp_read_field_def_AuctionReq(Rest, Z1, Z2, F@_1,
				  id('-infinity', TrUserData), TrUserData);
d_field_AuctionReq_max_rate(<<_:16, 1:1, _:7, _:1,
			      127:7, Rest/binary>>,
			    Z1, Z2, F@_1, _, TrUserData) ->
    dfp_read_field_def_AuctionReq(Rest, Z1, Z2, F@_1,
				  id(nan, TrUserData), TrUserData);
d_field_AuctionReq_max_rate(<<Value:32/little-float,
			      Rest/binary>>,
			    Z1, Z2, F@_1, _, TrUserData) ->
    dfp_read_field_def_AuctionReq(Rest, Z1, Z2, F@_1,
				  id(Value, TrUserData), TrUserData).

skip_varint_AuctionReq(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_AuctionReq(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData);
skip_varint_AuctionReq(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AuctionReq(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData).

skip_length_delimited_AuctionReq(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_AuctionReq(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_AuctionReq(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuctionReq(Rest2, 0, 0, F@_1, F@_2,
				  TrUserData).

skip_group_AuctionReq(Bin, FNum, Z2, F@_1, F@_2,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuctionReq(Rest, 0, Z2, F@_1, F@_2,
				  TrUserData).

skip_32_AuctionReq(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, TrUserData) ->
    dfp_read_field_def_AuctionReq(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData).

skip_64_AuctionReq(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, TrUserData) ->
    dfp_read_field_def_AuctionReq(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData).

decode_msg_AuctionResp(Bin, TrUserData) ->
    dfp_read_field_def_AuctionResp(Bin, 0, 0,
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_AuctionResp(<<8, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_AuctionResp_status(Rest, Z1, Z2, F@_1,
			       TrUserData);
dfp_read_field_def_AuctionResp(<<>>, 0, 0, F@_1, _) ->
    #'AuctionResp'{status = F@_1};
dfp_read_field_def_AuctionResp(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    dg_read_field_def_AuctionResp(Other, Z1, Z2, F@_1,
				  TrUserData).

dg_read_field_def_AuctionResp(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AuctionResp(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_AuctionResp(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_AuctionResp_status(Rest, 0, 0, F@_1,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AuctionResp(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_AuctionResp(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_AuctionResp(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		skip_group_AuctionResp(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> skip_32_AuctionResp(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_AuctionResp(<<>>, 0, 0, F@_1, _) ->
    #'AuctionResp'{status = F@_1}.

d_field_AuctionResp_status(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_AuctionResp_status(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
d_field_AuctionResp_status(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_AuctionResp.Status'(begin
					  <<Res:32/signed-native>> = <<(X bsl N
									  +
									  Acc):32/unsigned-native>>,
					  id(Res, TrUserData)
					end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_AuctionResp(RestF, 0, 0, NewFValue,
				   TrUserData).

skip_varint_AuctionResp(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    skip_varint_AuctionResp(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_AuctionResp(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AuctionResp(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_length_delimited_AuctionResp(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_AuctionResp(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_AuctionResp(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuctionResp(Rest2, 0, 0, F@_1,
				   TrUserData).

skip_group_AuctionResp(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuctionResp(Rest, 0, Z2, F@_1,
				   TrUserData).

skip_32_AuctionResp(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_AuctionResp(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_64_AuctionResp(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_AuctionResp(Rest, Z1, Z2, F@_1,
				   TrUserData).

decode_msg_InvestorActionReq(Bin, TrUserData) ->
    dfp_read_field_def_InvestorActionReq(Bin, 0, 0,
					 id(undefined, TrUserData),
					 id(undefined, TrUserData),
					 id(undefined, TrUserData),
					 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_InvestorActionReq(<<10,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				     TrUserData) ->
    d_field_InvestorActionReq_company(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_InvestorActionReq(<<16,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				     TrUserData) ->
    d_field_InvestorActionReq_req_type(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_InvestorActionReq(<<29,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				     TrUserData) ->
    d_field_InvestorActionReq_value(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_InvestorActionReq(<<37,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				     TrUserData) ->
    d_field_InvestorActionReq_rate(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, TrUserData);
dfp_read_field_def_InvestorActionReq(<<>>, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, _) ->
    #'InvestorActionReq'{company = F@_1, req_type = F@_2,
			 value = F@_3, rate = F@_4};
dfp_read_field_def_InvestorActionReq(Other, Z1, Z2,
				     F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_InvestorActionReq(Other, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_InvestorActionReq(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_InvestorActionReq(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					TrUserData);
dg_read_field_def_InvestorActionReq(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_InvestorActionReq_company(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, TrUserData);
      16 ->
	  d_field_InvestorActionReq_req_type(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, TrUserData);
      29 ->
	  d_field_InvestorActionReq_value(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, TrUserData);
      37 ->
	  d_field_InvestorActionReq_rate(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_InvestorActionReq(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, TrUserData);
	    1 ->
		skip_64_InvestorActionReq(Rest, 0, 0, F@_1, F@_2, F@_3,
					  F@_4, TrUserData);
	    2 ->
		skip_length_delimited_InvestorActionReq(Rest, 0, 0,
							F@_1, F@_2, F@_3, F@_4,
							TrUserData);
	    3 ->
		skip_group_InvestorActionReq(Rest, Key bsr 3, 0, F@_1,
					     F@_2, F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_InvestorActionReq(Rest, 0, 0, F@_1, F@_2, F@_3,
					  F@_4, TrUserData)
	  end
    end;
dg_read_field_def_InvestorActionReq(<<>>, 0, 0, F@_1,
				    F@_2, F@_3, F@_4, _) ->
    #'InvestorActionReq'{company = F@_1, req_type = F@_2,
			 value = F@_3, rate = F@_4}.

d_field_InvestorActionReq_company(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_InvestorActionReq_company(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData);
d_field_InvestorActionReq_company(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_InvestorActionReq(RestF, 0, 0,
					 NewFValue, F@_2, F@_3, F@_4,
					 TrUserData).

d_field_InvestorActionReq_req_type(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_InvestorActionReq_req_type(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       TrUserData);
d_field_InvestorActionReq_req_type(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_InvestorActionReq.RequestType'(begin
						     <<Res:32/signed-native>> =
							 <<(X bsl N +
							      Acc):32/unsigned-native>>,
						     id(Res, TrUserData)
						   end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_InvestorActionReq(RestF, 0, 0, F@_1,
					 NewFValue, F@_3, F@_4, TrUserData).

d_field_InvestorActionReq_value(<<0:16, 128, 127,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, _, F@_4, TrUserData) ->
    dfp_read_field_def_InvestorActionReq(Rest, Z1, Z2, F@_1,
					 F@_2, id(infinity, TrUserData), F@_4,
					 TrUserData);
d_field_InvestorActionReq_value(<<0:16, 128, 255,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, _, F@_4, TrUserData) ->
    dfp_read_field_def_InvestorActionReq(Rest, Z1, Z2, F@_1,
					 F@_2, id('-infinity', TrUserData),
					 F@_4, TrUserData);
d_field_InvestorActionReq_value(<<_:16, 1:1, _:7, _:1,
				  127:7, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, _, F@_4, TrUserData) ->
    dfp_read_field_def_InvestorActionReq(Rest, Z1, Z2, F@_1,
					 F@_2, id(nan, TrUserData), F@_4,
					 TrUserData);
d_field_InvestorActionReq_value(<<Value:32/little-float,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, _, F@_4, TrUserData) ->
    dfp_read_field_def_InvestorActionReq(Rest, Z1, Z2, F@_1,
					 F@_2, id(Value, TrUserData), F@_4,
					 TrUserData).

d_field_InvestorActionReq_rate(<<0:16, 128, 127,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) ->
    dfp_read_field_def_InvestorActionReq(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, id(infinity, TrUserData),
					 TrUserData);
d_field_InvestorActionReq_rate(<<0:16, 128, 255,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) ->
    dfp_read_field_def_InvestorActionReq(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3,
					 id('-infinity', TrUserData),
					 TrUserData);
d_field_InvestorActionReq_rate(<<_:16, 1:1, _:7, _:1,
				 127:7, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) ->
    dfp_read_field_def_InvestorActionReq(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, id(nan, TrUserData),
					 TrUserData);
d_field_InvestorActionReq_rate(<<Value:32/little-float,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) ->
    dfp_read_field_def_InvestorActionReq(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, id(Value, TrUserData),
					 TrUserData).

skip_varint_InvestorActionReq(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_InvestorActionReq(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData);
skip_varint_InvestorActionReq(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_InvestorActionReq(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_InvestorActionReq(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4,
					TrUserData)
    when N < 57 ->
    skip_length_delimited_InvestorActionReq(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, TrUserData);
skip_length_delimited_InvestorActionReq(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4,
					TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_InvestorActionReq(Rest2, 0, 0, F@_1,
					 F@_2, F@_3, F@_4, TrUserData).

skip_group_InvestorActionReq(Bin, FNum, Z2, F@_1, F@_2,
			     F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_InvestorActionReq(Rest, 0, Z2, F@_1,
					 F@_2, F@_3, F@_4, TrUserData).

skip_32_InvestorActionReq(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_InvestorActionReq(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, TrUserData).

skip_64_InvestorActionReq(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_InvestorActionReq(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, TrUserData).

decode_msg_InvestorActionResp(Bin, TrUserData) ->
    dfp_read_field_def_InvestorActionResp(Bin, 0, 0,
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_InvestorActionResp(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    d_field_InvestorActionResp_status(Rest, Z1, Z2, F@_1,
				      TrUserData);
dfp_read_field_def_InvestorActionResp(<<>>, 0, 0, F@_1,
				      _) ->
    #'InvestorActionResp'{status = F@_1};
dfp_read_field_def_InvestorActionResp(Other, Z1, Z2,
				      F@_1, TrUserData) ->
    dg_read_field_def_InvestorActionResp(Other, Z1, Z2,
					 F@_1, TrUserData).

dg_read_field_def_InvestorActionResp(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_InvestorActionResp(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_InvestorActionResp(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_InvestorActionResp_status(Rest, 0, 0, F@_1,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_InvestorActionResp(Rest, 0, 0, F@_1,
					       TrUserData);
	    1 ->
		skip_64_InvestorActionResp(Rest, 0, 0, F@_1,
					   TrUserData);
	    2 ->
		skip_length_delimited_InvestorActionResp(Rest, 0, 0,
							 F@_1, TrUserData);
	    3 ->
		skip_group_InvestorActionResp(Rest, Key bsr 3, 0, F@_1,
					      TrUserData);
	    5 ->
		skip_32_InvestorActionResp(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_InvestorActionResp(<<>>, 0, 0, F@_1,
				     _) ->
    #'InvestorActionResp'{status = F@_1}.

d_field_InvestorActionResp_status(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_InvestorActionResp_status(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
d_field_InvestorActionResp_status(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_InvestorActionResp.Status'(begin
						 <<Res:32/signed-native>> = <<(X
										 bsl
										 N
										 +
										 Acc):32/unsigned-native>>,
						 id(Res, TrUserData)
					       end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_InvestorActionResp(RestF, 0, 0,
					  NewFValue, TrUserData).

skip_varint_InvestorActionResp(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_InvestorActionResp(Rest, Z1, Z2, F@_1,
				   TrUserData);
skip_varint_InvestorActionResp(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_InvestorActionResp(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_length_delimited_InvestorActionResp(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_InvestorActionResp(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_InvestorActionResp(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_InvestorActionResp(Rest2, 0, 0, F@_1,
					  TrUserData).

skip_group_InvestorActionResp(Bin, FNum, Z2, F@_1,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_InvestorActionResp(Rest, 0, Z2, F@_1,
					  TrUserData).

skip_32_InvestorActionResp(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_InvestorActionResp(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_64_InvestorActionResp(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_InvestorActionResp(Rest, Z1, Z2,
					  F@_1, TrUserData).

'd_enum_LoginResp.ClientType'(0) -> 'COMPANY';
'd_enum_LoginResp.ClientType'(1) -> 'INVESTOR';
'd_enum_LoginResp.ClientType'(V) -> V.

'd_enum_LoginResp.Status'(0) -> 'INVALID';
'd_enum_LoginResp.Status'(1) -> 'SUCCESS';
'd_enum_LoginResp.Status'(V) -> V.

'd_enum_AuctionResp.Status'(0) -> 'SUCCESS';
'd_enum_AuctionResp.Status'(1) -> 'ONGOING_AUCTION';
'd_enum_AuctionResp.Status'(V) -> V.

'd_enum_InvestorActionReq.RequestType'(0) -> 'AUCTION';
'd_enum_InvestorActionReq.RequestType'(1) -> 'EMISSION';
'd_enum_InvestorActionReq.RequestType'(V) -> V.

'd_enum_InvestorActionResp.Status'(0) -> 'CONFIRMED';
'd_enum_InvestorActionResp.Status'(1) -> 'REPLACED';
'd_enum_InvestorActionResp.Status'(2) -> 'ENDED';
'd_enum_InvestorActionResp.Status'(3) -> 'INVALID';
'd_enum_InvestorActionResp.Status'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'LoginReq' -> merge_msg_LoginReq(Prev, New, TrUserData);
      'LoginResp' ->
	  merge_msg_LoginResp(Prev, New, TrUserData);
      'AuctionReq' ->
	  merge_msg_AuctionReq(Prev, New, TrUserData);
      'AuctionResp' ->
	  merge_msg_AuctionResp(Prev, New, TrUserData);
      'InvestorActionReq' ->
	  merge_msg_InvestorActionReq(Prev, New, TrUserData);
      'InvestorActionResp' ->
	  merge_msg_InvestorActionResp(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_LoginReq/3}).
merge_msg_LoginReq(#'LoginReq'{},
		   #'LoginReq'{name = NFname, password = NFpassword}, _) ->
    #'LoginReq'{name = NFname, password = NFpassword}.

-compile({nowarn_unused_function,merge_msg_LoginResp/3}).
merge_msg_LoginResp(#'LoginResp'{cType = PFcType},
		    #'LoginResp'{cType = NFcType, status = NFstatus}, _) ->
    #'LoginResp'{cType =
		     if NFcType =:= undefined -> PFcType;
			true -> NFcType
		     end,
		 status = NFstatus}.

-compile({nowarn_unused_function,merge_msg_AuctionReq/3}).
merge_msg_AuctionReq(#'AuctionReq'{},
		     #'AuctionReq'{value = NFvalue, max_rate = NFmax_rate},
		     _) ->
    #'AuctionReq'{value = NFvalue, max_rate = NFmax_rate}.

-compile({nowarn_unused_function,merge_msg_AuctionResp/3}).
merge_msg_AuctionResp(#'AuctionResp'{},
		      #'AuctionResp'{status = NFstatus}, _) ->
    #'AuctionResp'{status = NFstatus}.

-compile({nowarn_unused_function,merge_msg_InvestorActionReq/3}).
merge_msg_InvestorActionReq(#'InvestorActionReq'{rate =
						     PFrate},
			    #'InvestorActionReq'{company = NFcompany,
						 req_type = NFreq_type,
						 value = NFvalue,
						 rate = NFrate},
			    _) ->
    #'InvestorActionReq'{company = NFcompany,
			 req_type = NFreq_type, value = NFvalue,
			 rate =
			     if NFrate =:= undefined -> PFrate;
				true -> NFrate
			     end}.

-compile({nowarn_unused_function,merge_msg_InvestorActionResp/3}).
merge_msg_InvestorActionResp(#'InvestorActionResp'{},
			     #'InvestorActionResp'{status = NFstatus}, _) ->
    #'InvestorActionResp'{status = NFstatus}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'LoginReq' ->
	  v_msg_LoginReq(Msg, [MsgName], TrUserData);
      'LoginResp' ->
	  v_msg_LoginResp(Msg, [MsgName], TrUserData);
      'AuctionReq' ->
	  v_msg_AuctionReq(Msg, [MsgName], TrUserData);
      'AuctionResp' ->
	  v_msg_AuctionResp(Msg, [MsgName], TrUserData);
      'InvestorActionReq' ->
	  v_msg_InvestorActionReq(Msg, [MsgName], TrUserData);
      'InvestorActionResp' ->
	  v_msg_InvestorActionResp(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_LoginReq/3}).
-dialyzer({nowarn_function,v_msg_LoginReq/3}).
v_msg_LoginReq(#'LoginReq'{name = F1, password = F2},
	       Path, TrUserData) ->
    v_type_string(F1, [name | Path], TrUserData),
    v_type_string(F2, [password | Path], TrUserData),
    ok;
v_msg_LoginReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'LoginReq'}, X, Path).

-compile({nowarn_unused_function,v_msg_LoginResp/3}).
-dialyzer({nowarn_function,v_msg_LoginResp/3}).
v_msg_LoginResp(#'LoginResp'{cType = F1, status = F2},
		Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   'v_enum_LoginResp.ClientType'(F1, [cType | Path],
					 TrUserData)
    end,
    'v_enum_LoginResp.Status'(F2, [status | Path],
			      TrUserData),
    ok;
v_msg_LoginResp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'LoginResp'}, X, Path).

-compile({nowarn_unused_function,v_msg_AuctionReq/3}).
-dialyzer({nowarn_function,v_msg_AuctionReq/3}).
v_msg_AuctionReq(#'AuctionReq'{value = F1,
			       max_rate = F2},
		 Path, TrUserData) ->
    v_type_float(F1, [value | Path], TrUserData),
    v_type_float(F2, [max_rate | Path], TrUserData),
    ok;
v_msg_AuctionReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AuctionReq'}, X, Path).

-compile({nowarn_unused_function,v_msg_AuctionResp/3}).
-dialyzer({nowarn_function,v_msg_AuctionResp/3}).
v_msg_AuctionResp(#'AuctionResp'{status = F1}, Path,
		  TrUserData) ->
    'v_enum_AuctionResp.Status'(F1, [status | Path],
				TrUserData),
    ok;
v_msg_AuctionResp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AuctionResp'}, X, Path).

-compile({nowarn_unused_function,v_msg_InvestorActionReq/3}).
-dialyzer({nowarn_function,v_msg_InvestorActionReq/3}).
v_msg_InvestorActionReq(#'InvestorActionReq'{company =
						 F1,
					     req_type = F2, value = F3,
					     rate = F4},
			Path, TrUserData) ->
    v_type_string(F1, [company | Path], TrUserData),
    'v_enum_InvestorActionReq.RequestType'(F2,
					   [req_type | Path], TrUserData),
    v_type_float(F3, [value | Path], TrUserData),
    if F4 == undefined -> ok;
       true -> v_type_float(F4, [rate | Path], TrUserData)
    end,
    ok;
v_msg_InvestorActionReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'InvestorActionReq'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_InvestorActionResp/3}).
-dialyzer({nowarn_function,v_msg_InvestorActionResp/3}).
v_msg_InvestorActionResp(#'InvestorActionResp'{status =
						   F1},
			 Path, TrUserData) ->
    'v_enum_InvestorActionResp.Status'(F1, [status | Path],
				       TrUserData),
    ok;
v_msg_InvestorActionResp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'InvestorActionResp'}, X,
		  Path).

-compile({nowarn_unused_function,'v_enum_LoginResp.ClientType'/3}).
-dialyzer({nowarn_function,'v_enum_LoginResp.ClientType'/3}).
'v_enum_LoginResp.ClientType'('COMPANY', _Path,
			      _TrUserData) ->
    ok;
'v_enum_LoginResp.ClientType'('INVESTOR', _Path,
			      _TrUserData) ->
    ok;
'v_enum_LoginResp.ClientType'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_LoginResp.ClientType'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'LoginResp.ClientType'}, X,
		  Path).

-compile({nowarn_unused_function,'v_enum_LoginResp.Status'/3}).
-dialyzer({nowarn_function,'v_enum_LoginResp.Status'/3}).
'v_enum_LoginResp.Status'('INVALID', _Path,
			  _TrUserData) ->
    ok;
'v_enum_LoginResp.Status'('SUCCESS', _Path,
			  _TrUserData) ->
    ok;
'v_enum_LoginResp.Status'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_LoginResp.Status'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'LoginResp.Status'}, X,
		  Path).

-compile({nowarn_unused_function,'v_enum_AuctionResp.Status'/3}).
-dialyzer({nowarn_function,'v_enum_AuctionResp.Status'/3}).
'v_enum_AuctionResp.Status'('SUCCESS', _Path,
			    _TrUserData) ->
    ok;
'v_enum_AuctionResp.Status'('ONGOING_AUCTION', _Path,
			    _TrUserData) ->
    ok;
'v_enum_AuctionResp.Status'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_AuctionResp.Status'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'AuctionResp.Status'}, X,
		  Path).

-compile({nowarn_unused_function,'v_enum_InvestorActionReq.RequestType'/3}).
-dialyzer({nowarn_function,'v_enum_InvestorActionReq.RequestType'/3}).
'v_enum_InvestorActionReq.RequestType'('AUCTION', _Path,
				       _TrUserData) ->
    ok;
'v_enum_InvestorActionReq.RequestType'('EMISSION',
				       _Path, _TrUserData) ->
    ok;
'v_enum_InvestorActionReq.RequestType'(V, Path,
				       TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_InvestorActionReq.RequestType'(X, Path,
				       _TrUserData) ->
    mk_type_error({invalid_enum,
		   'InvestorActionReq.RequestType'},
		  X, Path).

-compile({nowarn_unused_function,'v_enum_InvestorActionResp.Status'/3}).
-dialyzer({nowarn_function,'v_enum_InvestorActionResp.Status'/3}).
'v_enum_InvestorActionResp.Status'('CONFIRMED', _Path,
				   _TrUserData) ->
    ok;
'v_enum_InvestorActionResp.Status'('REPLACED', _Path,
				   _TrUserData) ->
    ok;
'v_enum_InvestorActionResp.Status'('ENDED', _Path,
				   _TrUserData) ->
    ok;
'v_enum_InvestorActionResp.Status'('INVALID', _Path,
				   _TrUserData) ->
    ok;
'v_enum_InvestorActionResp.Status'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_InvestorActionResp.Status'(X, Path,
				   _TrUserData) ->
    mk_type_error({invalid_enum,
		   'InvestorActionResp.Status'},
		  X, Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_float/3}).
-dialyzer({nowarn_function,v_type_float/3}).
v_type_float(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_float(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_float(infinity, _Path, _TrUserData) -> ok;
v_type_float('-infinity', _Path, _TrUserData) -> ok;
v_type_float(nan, _Path, _TrUserData) -> ok;
v_type_float(X, Path, _TrUserData) ->
    mk_type_error(bad_float_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{enum, 'LoginResp.ClientType'},
      [{'COMPANY', 0}, {'INVESTOR', 1}]},
     {{enum, 'LoginResp.Status'},
      [{'INVALID', 0}, {'SUCCESS', 1}]},
     {{enum, 'AuctionResp.Status'},
      [{'SUCCESS', 0}, {'ONGOING_AUCTION', 1}]},
     {{enum, 'InvestorActionReq.RequestType'},
      [{'AUCTION', 0}, {'EMISSION', 1}]},
     {{enum, 'InvestorActionResp.Status'},
      [{'CONFIRMED', 0}, {'REPLACED', 1}, {'ENDED', 2},
       {'INVALID', 3}]},
     {{msg, 'LoginReq'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = password, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'LoginResp'},
      [#field{name = cType, fnum = 1, rnum = 2,
	      type = {enum, 'LoginResp.ClientType'},
	      occurrence = optional, opts = []},
       #field{name = status, fnum = 2, rnum = 3,
	      type = {enum, 'LoginResp.Status'},
	      occurrence = required, opts = []}]},
     {{msg, 'AuctionReq'},
      [#field{name = value, fnum = 1, rnum = 2, type = float,
	      occurrence = required, opts = []},
       #field{name = max_rate, fnum = 2, rnum = 3,
	      type = float, occurrence = required, opts = []}]},
     {{msg, 'AuctionResp'},
      [#field{name = status, fnum = 1, rnum = 2,
	      type = {enum, 'AuctionResp.Status'},
	      occurrence = required, opts = []}]},
     {{msg, 'InvestorActionReq'},
      [#field{name = company, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = req_type, fnum = 2, rnum = 3,
	      type = {enum, 'InvestorActionReq.RequestType'},
	      occurrence = required, opts = []},
       #field{name = value, fnum = 3, rnum = 4, type = float,
	      occurrence = required, opts = []},
       #field{name = rate, fnum = 4, rnum = 5, type = float,
	      occurrence = optional, opts = []}]},
     {{msg, 'InvestorActionResp'},
      [#field{name = status, fnum = 1, rnum = 2,
	      type = {enum, 'InvestorActionResp.Status'},
	      occurrence = required, opts = []}]}].


get_msg_names() ->
    ['LoginReq', 'LoginResp', 'AuctionReq', 'AuctionResp',
     'InvestorActionReq', 'InvestorActionResp'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['LoginReq', 'LoginResp', 'AuctionReq', 'AuctionResp',
     'InvestorActionReq', 'InvestorActionResp'].


get_enum_names() ->
    ['LoginResp.ClientType', 'LoginResp.Status',
     'AuctionResp.Status', 'InvestorActionReq.RequestType',
     'InvestorActionResp.Status'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('LoginReq') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = password, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []}];
find_msg_def('LoginResp') ->
    [#field{name = cType, fnum = 1, rnum = 2,
	    type = {enum, 'LoginResp.ClientType'},
	    occurrence = optional, opts = []},
     #field{name = status, fnum = 2, rnum = 3,
	    type = {enum, 'LoginResp.Status'},
	    occurrence = required, opts = []}];
find_msg_def('AuctionReq') ->
    [#field{name = value, fnum = 1, rnum = 2, type = float,
	    occurrence = required, opts = []},
     #field{name = max_rate, fnum = 2, rnum = 3,
	    type = float, occurrence = required, opts = []}];
find_msg_def('AuctionResp') ->
    [#field{name = status, fnum = 1, rnum = 2,
	    type = {enum, 'AuctionResp.Status'},
	    occurrence = required, opts = []}];
find_msg_def('InvestorActionReq') ->
    [#field{name = company, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = req_type, fnum = 2, rnum = 3,
	    type = {enum, 'InvestorActionReq.RequestType'},
	    occurrence = required, opts = []},
     #field{name = value, fnum = 3, rnum = 4, type = float,
	    occurrence = required, opts = []},
     #field{name = rate, fnum = 4, rnum = 5, type = float,
	    occurrence = optional, opts = []}];
find_msg_def('InvestorActionResp') ->
    [#field{name = status, fnum = 1, rnum = 2,
	    type = {enum, 'InvestorActionResp.Status'},
	    occurrence = required, opts = []}];
find_msg_def(_) -> error.


find_enum_def('LoginResp.ClientType') ->
    [{'COMPANY', 0}, {'INVESTOR', 1}];
find_enum_def('LoginResp.Status') ->
    [{'INVALID', 0}, {'SUCCESS', 1}];
find_enum_def('AuctionResp.Status') ->
    [{'SUCCESS', 0}, {'ONGOING_AUCTION', 1}];
find_enum_def('InvestorActionReq.RequestType') ->
    [{'AUCTION', 0}, {'EMISSION', 1}];
find_enum_def('InvestorActionResp.Status') ->
    [{'CONFIRMED', 0}, {'REPLACED', 1}, {'ENDED', 2},
     {'INVALID', 3}];
find_enum_def(_) -> error.


enum_symbol_by_value('LoginResp.ClientType', Value) ->
    'enum_symbol_by_value_LoginResp.ClientType'(Value);
enum_symbol_by_value('LoginResp.Status', Value) ->
    'enum_symbol_by_value_LoginResp.Status'(Value);
enum_symbol_by_value('AuctionResp.Status', Value) ->
    'enum_symbol_by_value_AuctionResp.Status'(Value);
enum_symbol_by_value('InvestorActionReq.RequestType',
		     Value) ->
    'enum_symbol_by_value_InvestorActionReq.RequestType'(Value);
enum_symbol_by_value('InvestorActionResp.Status',
		     Value) ->
    'enum_symbol_by_value_InvestorActionResp.Status'(Value).


enum_value_by_symbol('LoginResp.ClientType', Sym) ->
    'enum_value_by_symbol_LoginResp.ClientType'(Sym);
enum_value_by_symbol('LoginResp.Status', Sym) ->
    'enum_value_by_symbol_LoginResp.Status'(Sym);
enum_value_by_symbol('AuctionResp.Status', Sym) ->
    'enum_value_by_symbol_AuctionResp.Status'(Sym);
enum_value_by_symbol('InvestorActionReq.RequestType',
		     Sym) ->
    'enum_value_by_symbol_InvestorActionReq.RequestType'(Sym);
enum_value_by_symbol('InvestorActionResp.Status',
		     Sym) ->
    'enum_value_by_symbol_InvestorActionResp.Status'(Sym).


'enum_symbol_by_value_LoginResp.ClientType'(0) ->
    'COMPANY';
'enum_symbol_by_value_LoginResp.ClientType'(1) ->
    'INVESTOR'.


'enum_value_by_symbol_LoginResp.ClientType'('COMPANY') ->
    0;
'enum_value_by_symbol_LoginResp.ClientType'('INVESTOR') ->
    1.

'enum_symbol_by_value_LoginResp.Status'(0) -> 'INVALID';
'enum_symbol_by_value_LoginResp.Status'(1) -> 'SUCCESS'.


'enum_value_by_symbol_LoginResp.Status'('INVALID') -> 0;
'enum_value_by_symbol_LoginResp.Status'('SUCCESS') -> 1.

'enum_symbol_by_value_AuctionResp.Status'(0) ->
    'SUCCESS';
'enum_symbol_by_value_AuctionResp.Status'(1) ->
    'ONGOING_AUCTION'.


'enum_value_by_symbol_AuctionResp.Status'('SUCCESS') ->
    0;
'enum_value_by_symbol_AuctionResp.Status'('ONGOING_AUCTION') ->
    1.

'enum_symbol_by_value_InvestorActionReq.RequestType'(0) ->
    'AUCTION';
'enum_symbol_by_value_InvestorActionReq.RequestType'(1) ->
    'EMISSION'.


'enum_value_by_symbol_InvestorActionReq.RequestType'('AUCTION') ->
    0;
'enum_value_by_symbol_InvestorActionReq.RequestType'('EMISSION') ->
    1.

'enum_symbol_by_value_InvestorActionResp.Status'(0) ->
    'CONFIRMED';
'enum_symbol_by_value_InvestorActionResp.Status'(1) ->
    'REPLACED';
'enum_symbol_by_value_InvestorActionResp.Status'(2) ->
    'ENDED';
'enum_symbol_by_value_InvestorActionResp.Status'(3) ->
    'INVALID'.


'enum_value_by_symbol_InvestorActionResp.Status'('CONFIRMED') ->
    0;
'enum_value_by_symbol_InvestorActionResp.Status'('REPLACED') ->
    1;
'enum_value_by_symbol_InvestorActionResp.Status'('ENDED') ->
    2;
'enum_value_by_symbol_InvestorActionResp.Status'('INVALID') ->
    3.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "4.4.0".

gpb_version_as_list() ->
    [4,4,0].
